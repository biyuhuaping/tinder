//
//  FloatingExtendVC.m
//
//  Created by yiche on 2025/3/27.
//

#import "FloatingExtendVC.h"
#import <Security/Security.h>
#import "Toast.h"
#import "JailbreakDetectionTool.h"
#import "ZBNetwork.h"
#import "AESUtil.h"
#import "Tools.h"


//#define kFilePath @"/var/mobile/Documents/new_config.json"
//#define kAutoPath @"/var/mobile/Documents/auto_status.json"
#define kFilePath [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@"device_config.json"]
#define kAutoPath [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@"auto_status.json"]
#define kService [[NSBundle mainBundle] bundleIdentifier]

// APIËØ∑Ê±ÇÂ∏∏Èáè
static NSString *const API_URL = @"https://hendiapp.org/app/pkg/getIOSMobdata";
static NSString *const API_AUTH_KEY = @"3b63282f65fcb2530874ad2aa2e82074";

@interface FloatingExtendVC ()<UIScrollViewDelegate>

@property (nonatomic, strong) UILabel *titleLab;
@property (nonatomic, strong) UILabel *deviceLab;
@property (nonatomic, strong) UIScrollView *scrollView;
@property (nonatomic, strong) UIView *contentView;
@property (nonatomic, strong) UIView *container1;
@property (nonatomic, strong) UIView *container2;
@property (nonatomic, strong) UITextView *textView;
@property (nonatomic, strong) UITextField *textField1;
@property (nonatomic, strong) UITextField *textField2;
@property (nonatomic, strong) UILabel *tokenLab;
@property (nonatomic, strong) UITextView *responseTextView;

@property (nonatomic, strong) NSLayoutConstraint *container2H;

//ËÆæÂ§áID
@property (nonatomic, copy) NSString *deviceId;
//ÊøÄÊ¥ªÁ†Å
@property (nonatomic, copy) NSString *codeStr;

@end

@implementation FloatingExtendVC

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = UIColor.systemBackgroundColor;

    //Ëé∑Âèñ‰∏Ä‰∏™deviceId
    NSString *deviceId = [self loadFromKeychainWithAccount:@"myDeviceID"];
    if (deviceId && deviceId.length > 0) {
        self.deviceId = deviceId;
        NSLog(@"UUID: %@", deviceId);
    } else {
        // ÁîüÊàêÊñ∞ÁöÑ UUID
        NSUUID *UUID = [[UIDevice alloc] identifierForVendor];
        NSString *UUIDStr = [UUID UUIDString];
        NSLog(@"UUID: Generated new: %@", UUIDStr);
        self.deviceId = UUIDStr;
        // ‰øùÂ≠òÂà∞Èí•Âåô‰∏≤
        [self saveToKeychainWithAccount:@"myDeviceID" value:UUIDStr];
    }

    self.deviceLab.text = self.deviceId;
//    [self requestInfo];
    [self setupViewUI];
    [self updatetokenLab];
        
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        [self readAllKeychainItems];
        [self redAllUserDefaults];
        [JailbreakDetectionTool isDeviceJailbroken];
        [JailbreakDetectionTool isInjected];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            NSLog(@"end,ÂõûÂà∞‰∏ªÁ∫øÁ®ã");
        });
    });
    
    UILongPressGestureRecognizer *longPressGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handleTap:)];
    longPressGesture.minimumPressDuration = 3.0; // ÈïøÊåâ 3 ÁßíËß¶Âèë
    longPressGesture.allowableMovement = 10; // ÂèØÈÄâÔºöÊâãÊåáÂÖÅËÆ∏ÁßªÂä®ËåÉÂõ¥ÔºàÈªòËÆ§ 10ptÔºâ
    [self.view addGestureRecognizer:longPressGesture];
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView{
    [Tools.keyWindow endEditing:YES];
}

- (void)handleTap:(UILongPressGestureRecognizer *)gesture {
    if (gesture.state == UIGestureRecognizerStateBegan) {
        NSLog(@"ÈïøÊåâ5ÁßíËß¶Âèë");
        CGPoint location = [gesture locationInView:self.view];
        CGFloat screenWidth = [UIScreen mainScreen].bounds.size.width;

        // ËÆæÁΩÆÂè≥‰∏äËßíÊåáÂÆöÂå∫ÂüüÔºåÊØîÂ¶Ç 100x100
        if (location.x > screenWidth - 100 && location.y < 100) {
            self.container2H.constant = 120;
            [UIView animateWithDuration:0.25 animations:^{
                [self.view layoutIfNeeded];
            }];
        }
    }
}

//È¶ñÂÖàÊ£ÄÊü•ÊòØÂê¶ÊúâÊïà
- (void)requestInfo{
    NSDictionary *dic = @{
        @"device_id" : self.deviceId
    };
    [ZBNetwork POST:@"/api/device/codeinfo" param:dic success:^(NSData * _Nullable data, NSURLResponse * _Nullable response) {
        // Â∞ùËØïËΩ¨ JSON
        NSError *jsonError = nil;
        NSDictionary *dicData = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];
        if (jsonError) {
            NSLog(@"‚ùå JSON Ëß£ÊûêÂ§±Ë¥•: %@", jsonError.localizedDescription);
            return;
        }
        NSLog(@"‚úÖ JSON Ëß£ÊûêÊàêÂäü: %@", dicData);
//        NSDictionary *dicData = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];

//        NSDictionary *dicData = response;
        NSString *dataStr = dicData[@"data"];
        if (!dataStr.length) {
            return;
        }
        NSString *jsonStr = [AESUtil aesDecrypt:dataStr];//Ëß£ÊûêÂØÜÊñáÂæóÂà∞jsonÂ≠óÁ¨¶‰∏≤
        NSDictionary *dict = [Tools convert2DictionaryWithJSONString:jsonStr];
//        NSLog(@"codeinfoÔºö%@", dict);
        int isSuccess = [dict[@"isSuccess"] intValue];
        if (isSuccess == 1) {// 1‰∏çÈúÄË¶ÅÁªëÂÆö
            [self updatetokenLab];
        }else{//-1ÈúÄË¶ÅÁªëÂÆö
            [self presentActivationAlert];
        }
    } failure:^(NSError * _Nullable error) {
        [self presentActivationAlert];
    }];
}

//ÁªëÂÆöËÆæÂ§á
- (void)requestBindingDevice{
    NSMutableDictionary *dic = [NSMutableDictionary new];
    dic[@"deviceId"] = self.deviceId;
    dic[@"code"] = self.codeStr;
    
    NSString *jsonStr = [Tools convert2JSONWithDictionary:dic];//Â≠óÂÖ∏ËΩ¨Êàêjson
    NSString *encStr = [AESUtil aesEncrypt:jsonStr];
    NSLog(@"encStr:%@", encStr);
    
    [ZBNetwork POST:@"/api/device/bindCode" param:@{@"device_str" : encStr} success:^(NSData * _Nullable data, NSURLResponse * _Nullable response) {
//        NSLog(@"%@", response);
        NSError *jsonError = nil;
        NSDictionary *dicData = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];
        if (jsonError) {
            NSLog(@"‚ùå JSON Ëß£ÊûêÂ§±Ë¥•: %@", jsonError.localizedDescription);
            return;
        }
        NSString *dataStr = dicData[@"data"];
        if (dataStr.length) {
            NSString *jsonStr = [AESUtil aesDecrypt:dataStr];//Ëß£ÊûêÂØÜÊñáÂæóÂà∞jsonÂ≠óÁ¨¶‰∏≤
            NSDictionary *dict = [Tools convert2DictionaryWithJSONString:jsonStr];
            int isSuccess = [dict[@"isSuccess"] intValue];
            if (isSuccess == 1) {//1
                [Toast showToast:@"üéâÊéàÊùÉÊàêÂäüüéâ"];
                [self updatetokenLab];
            }else{//0
                [self presentActivationAlert];
            }
        }else{
            [Toast showToast:dicData[@"msg"]];
            [self presentActivationAlert];
        }
    } failure:^(NSError * _Nullable error) {
        [Toast showToast:error.userInfo[@"msg"]];
        [self presentActivationAlert];
    }];
}

#pragma mark - ÊøÄÊ¥ª
- (void)presentActivationAlert {
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"ËæìÂÖ•ÊøÄÊ¥ªÁ†Å" message:nil preferredStyle:UIAlertControllerStyleAlert];

    __block UIAlertAction *confirm = [UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        UITextField *textField = alert.textFields.firstObject;
        NSString *code = textField.text;
        if (code.length != 12 || ![self isValidActivationCode:code]) {
            [Toast showToast:@"Êó†ÊïàÊøÄÊ¥ªÁ†Å"];
            // ÊâãÂä®ÈáçÊñ∞ÊøÄÊ¥ªËæìÂÖ•Ê°Ü
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [self presentActivationAlert]; // ÈáçÊñ∞ÂºπÂá∫Êï¥‰∏™ÂºπÁ™ó
            });
            return;
        }

        self.codeStr = code;
        [self requestBindingDevice];
    }];

    confirm.enabled = NO; // ÂàùÂßãÁ¶ÅÁî®
    [alert addAction:confirm];

    // Ê∑ªÂä†ËæìÂÖ•Ê°ÜÂπ∂ÂÆûÊó∂ÁõëÂê¨ÂÜÖÂÆπÂèòÂåñ
    [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        textField.placeholder = @"ËØ∑ËæìÂÖ•ÊøÄÊ¥ªÁ†Å";
        textField.font = [UIFont systemFontOfSize:18];
        textField.keyboardType = UIKeyboardTypeASCIICapable;
        textField.autocapitalizationType = UITextAutocapitalizationTypeAllCharacters;

        [[NSNotificationCenter defaultCenter] addObserverForName:UITextFieldTextDidChangeNotification object:textField queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {
            NSString *text = textField.text;
            confirm.enabled = (text.length == 12 && [self isValidActivationCode:text]);
        }];
    }];

    [self presentViewController:alert animated:YES completion:^{
        [alert.textFields.firstObject becomeFirstResponder];
    }];
}

- (BOOL)isValidActivationCode:(NSString *)code {
    NSCharacterSet *validSet = [NSCharacterSet characterSetWithCharactersInString:@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"];
    return [[code stringByTrimmingCharactersInSet:validSet.invertedSet] isEqualToString:code];
}

#pragma mark - ÁïåÈù¢Â∏ÉÂ±Ä
- (void)setupViewUI {
    self.titleLab = [[UILabel alloc] init];
    self.titleLab.text = @"ÂÆ¢ÊúçTg:abb0226";
    self.titleLab.font = [UIFont boldSystemFontOfSize:24];
    self.titleLab.textColor = UIColor.labelColor;
    self.titleLab.textAlignment = NSTextAlignmentCenter;
    self.titleLab.translatesAutoresizingMaskIntoConstraints = NO; // ÂÖ≥ÈîÆ
    [self.view addSubview:self.titleLab];
    
    UILayoutGuide *safeArea = self.view.safeAreaLayoutGuide;
    [NSLayoutConstraint activateConstraints:@[
        [self.titleLab.topAnchor constraintEqualToAnchor:safeArea.topAnchor constant:0],
        [self.titleLab.leftAnchor constraintEqualToAnchor:self.view.leftAnchor constant:40],
        [self.titleLab.rightAnchor constraintEqualToAnchor:self.view.rightAnchor constant:-40]
    ]];
    
    [self setupScrollView];
    [self getTokenViews];
    [self setupBottmViews];
}

- (void)setupScrollView {
    // ÂàõÂª∫ scrollView
    self.scrollView = [[UIScrollView alloc] init];
    self.scrollView.bounces = YES;
    self.scrollView.delegate = self;
    self.scrollView.translatesAutoresizingMaskIntoConstraints = NO;
//    self.scrollView.showsVerticalScrollIndicator = NO;
//    self.scrollView.backgroundColor = UIColor.greenColor;
    [self.view addSubview:self.scrollView];
    
    // ÂàõÂª∫ contentView
    self.contentView = [[UIView alloc] init];
    self.contentView.translatesAutoresizingMaskIntoConstraints = NO;
//    self.contentView.backgroundColor = UIColor.redColor;
    [self.scrollView addSubview:self.contentView];
    
    // ËÆæÁΩÆ scrollView ÁöÑÁ∫¶Êùü
    [NSLayoutConstraint activateConstraints:@[
        [self.scrollView.topAnchor constraintEqualToAnchor:self.titleLab.bottomAnchor constant:10],
        [self.scrollView.leftAnchor constraintEqualToAnchor:self.view.leftAnchor],
        [self.scrollView.rightAnchor constraintEqualToAnchor:self.view.rightAnchor],
        [self.scrollView.bottomAnchor constraintEqualToAnchor:self.view.bottomAnchor]
    ]];
    
    // ËÆæÁΩÆ contentView ÁöÑÁ∫¶Êùü
    [NSLayoutConstraint activateConstraints:@[
        // ÁªëÂÆö scrollView Ëæπ
        [self.contentView.topAnchor constraintEqualToAnchor:self.scrollView.topAnchor],
        [self.contentView.leftAnchor constraintEqualToAnchor:self.scrollView.leftAnchor],
        [self.contentView.rightAnchor constraintEqualToAnchor:self.scrollView.rightAnchor],
        [self.contentView.bottomAnchor constraintEqualToAnchor:self.scrollView.bottomAnchor],

        // Ê®™ÂêëÊíëÂºÄ
        [self.contentView.widthAnchor constraintEqualToAnchor:self.scrollView.widthAnchor],

        // ‚úÖ ÂÖ≥ÈîÆÔºöÂ∫ïÈÉ®‰∏éÁà∂ËßÜÂõæÂÅèÁßª 20ÔºåÁ°Æ‰øùÂÜÖÂÆπË∂ÖÂá∫È´òÂ∫¶ÂèØ‰ª•ÊªöÂä®
        [self.contentView.bottomAnchor constraintEqualToAnchor:self.view.bottomAnchor constant:20]
    ]];
    // ËÆæÁΩÆ tap ÊâãÂäøÔºåÁÇπÂáª scrollView Êó∂ÊâßË°å popVC ÊñπÊ≥ï
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(popVC)];
    [self.scrollView addGestureRecognizer:tap];
}

// ÊèêÂèñtoken
- (void)getTokenViews{
    self.container1 = ({
        UIView *container = [[UIView alloc] init];
        container.backgroundColor = UIColor.systemGroupedBackgroundColor;// [UIColor colorWithWhite:0.98 alpha:1.0];
        container.layer.cornerRadius = 6;
        container.layer.borderColor = [UIColor colorWithWhite:0.96 alpha:1.0].CGColor;
        container.layer.borderWidth = 1;
        container.clipsToBounds = YES;
        container.translatesAutoresizingMaskIntoConstraints = NO;
        container;
    });
    
    UILabel *contentLab = [[UILabel alloc] init];
    contentLab.backgroundColor = UIColor.systemGroupedBackgroundColor;//[UIColor colorWithWhite:0.98 alpha:1.0];
    contentLab.font = [UIFont systemFontOfSize:16];
    contentLab.textColor = UIColor.labelColor;
    contentLab.numberOfLines = 0;
    contentLab.adjustsFontSizeToFitWidth = YES;
    contentLab.minimumScaleFactor = 0.8;
    contentLab.translatesAutoresizingMaskIntoConstraints = NO;
    self.tokenLab = contentLab;
    [self.container1 addSubview:contentLab];
    
    UIButton *copyBtn = [UIButton buttonWithType:UIButtonTypeSystem];
    [copyBtn setTitle:@"Â§çÂà∂" forState:UIControlStateNormal];
    copyBtn.titleLabel.font = [UIFont systemFontOfSize:18 weight:UIFontWeightSemibold];
    [copyBtn setTitleColor:UIColor.systemBlueColor forState:UIControlStateNormal];
    [copyBtn addTarget:self action:@selector(copyAction:) forControlEvents:UIControlEventTouchUpInside];
    copyBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [self.contentView addSubview:self.container1];
    [self.container1 addSubview:copyBtn];
    
    [NSLayoutConstraint activateConstraints:@[
        [self.container1.topAnchor constraintEqualToAnchor:self.contentView.topAnchor constant:50],
        [self.container1.leftAnchor constraintEqualToAnchor:self.contentView.leftAnchor constant:15],
        [self.container1.rightAnchor constraintEqualToAnchor:self.contentView.rightAnchor constant:-15],
        [self.container1.heightAnchor constraintEqualToConstant:120],
    ]];
    [NSLayoutConstraint activateConstraints:@[
        [copyBtn.topAnchor constraintEqualToAnchor:self.container1.topAnchor],
        [copyBtn.bottomAnchor constraintEqualToAnchor:self.container1.bottomAnchor],
        [copyBtn.rightAnchor constraintEqualToAnchor:self.container1.rightAnchor],
        [copyBtn.widthAnchor constraintEqualToConstant:50]
    ]];
    [NSLayoutConstraint activateConstraints:@[
        [contentLab.topAnchor constraintEqualToAnchor:self.container1.topAnchor constant:12],
        [contentLab.leftAnchor constraintEqualToAnchor:self.container1.leftAnchor constant:12],
        [contentLab.rightAnchor constraintEqualToAnchor:copyBtn.leftAnchor],
        [contentLab.bottomAnchor constraintEqualToAnchor:self.container1.bottomAnchor constant:-12]
    ]];

    
    //ËÆæÁΩÆ
    self.container2 = ({
        UIView *container = [[UIView alloc] init];
        container.backgroundColor = UIColor.systemGroupedBackgroundColor;// [UIColor colorWithWhite:0.98 alpha:1.0];
        container.layer.cornerRadius = 6;
        container.layer.borderColor = [UIColor colorWithWhite:0.96 alpha:1.0].CGColor;
        container.layer.borderWidth = 1;
        container.clipsToBounds = YES;
        container.translatesAutoresizingMaskIntoConstraints = NO;
        container;
    });
    
    UIButton *saveBtn = [UIButton buttonWithType:UIButtonTypeSystem];
    [saveBtn setTitle:@"ÁôªÂΩï" forState:UIControlStateNormal];
    saveBtn.titleLabel.font = [UIFont systemFontOfSize:18 weight:UIFontWeightSemibold];
    [saveBtn setTitleColor:UIColor.systemBlueColor forState:UIControlStateNormal];
    [saveBtn addTarget:self action:@selector(saveAction:) forControlEvents:UIControlEventTouchUpInside];
    saveBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [self.contentView addSubview:self.container2];
    [self.container2 addSubview:self.textView];
    [self.container2 addSubview:saveBtn];
    
    NSLayoutConstraint *heightConstraint = [self.container2.heightAnchor constraintEqualToConstant:0];
    self.container2H = heightConstraint;
    [NSLayoutConstraint activateConstraints:@[
        [self.container2.topAnchor constraintEqualToAnchor:self.container1.bottomAnchor constant:20],
        [self.container2.leftAnchor constraintEqualToAnchor:self.contentView.leftAnchor constant:15],
        [self.container2.rightAnchor constraintEqualToAnchor:self.contentView.rightAnchor constant:-15],
        heightConstraint
    ]];
    [NSLayoutConstraint activateConstraints:@[
        [saveBtn.topAnchor constraintEqualToAnchor:self.container2.topAnchor],
        [saveBtn.bottomAnchor constraintEqualToAnchor:self.container2.bottomAnchor],
        [saveBtn.rightAnchor constraintEqualToAnchor:self.container2.rightAnchor],
        [saveBtn.widthAnchor constraintEqualToConstant:50]
    ]];
    [NSLayoutConstraint activateConstraints:@[
        [self.textView.topAnchor constraintEqualToAnchor:self.container2.topAnchor constant:12],
        [self.textView.leftAnchor constraintEqualToAnchor:self.container2.leftAnchor constant:12],
        [self.textView.rightAnchor constraintEqualToAnchor:saveBtn.leftAnchor],
        [self.textView.bottomAnchor constraintEqualToAnchor:self.container2.bottomAnchor constant:-12]
    ]];
    
    /*
    //ÁªèÁ∫¨Â∫¶
    UIView *view3 = [[UIView alloc] init];
    view3.backgroundColor = [UIColor colorWithWhite:0.98 alpha:1.0];
    view3.layer.cornerRadius = 6;
    view3.layer.borderColor = [UIColor colorWithWhite:0.96 alpha:1.0].CGColor;
    view3.layer.borderWidth = 1;
    [self.contentView addSubview:view3];
    [self.contentView addSubview:self.textField1];
    [self.contentView addSubview:self.textField2];

    UIButton *saveBtn3 = [UIButton buttonWithType:UIButtonTypeSystem];
    [saveBtn3 setTitle:@"‰øùÂ≠ò\nÁªèÁ∫¨Â∫¶" forState:UIControlStateNormal]; // ‰ΩøÁî® \n ËøõË°åÊç¢Ë°å
    saveBtn3.titleLabel.numberOfLines = 0; // ÂÖÅËÆ∏Â§öË°åÊòæÁ§∫
    saveBtn3.titleLabel.textAlignment = NSTextAlignmentCenter; // ÊñáÂ≠óÂ±Ö‰∏≠
    saveBtn3.titleLabel.font = [UIFont systemFontOfSize:18 weight:UIFontWeightSemibold];
    [saveBtn3 setTitleColor:UIColor.systemBlueColor forState:UIControlStateNormal];
    [saveBtn3 addTarget:self action:@selector(saveLonLatAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.contentView addSubview:saveBtn3];
    
    [view3 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(view2.mas_bottom).offset(20);
        make.left.right.equalTo(self.contentView).inset(15);
//        make.height.mas_equalTo(120);
    }];
    [self.textField1 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.left.equalTo(view3).inset(10);
        make.right.equalTo(saveBtn3.mas_left);
        make.height.mas_equalTo(44);
    }];
    [self.textField2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.textField1.mas_bottom);
        make.left.equalTo(view3).inset(12);
        make.right.equalTo(saveBtn3.mas_left);
        make.height.mas_equalTo(44);
        make.bottom.mas_equalTo(view3).inset(10);
    }];
    [saveBtn3 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.bottom.right.mas_equalTo(view3);
        make.width.mas_equalTo(50);
    }];*/
}

- (void)setupBottmViews {
    // Ê∏ÖÈô§ÁºìÂ≠òÊåâÈíÆ
    UIButton *clearCacheBtn = [UIButton buttonWithType:UIButtonTypeSystem];
    clearCacheBtn.backgroundColor = [UIColor colorWithRed:0.27 green:0.56 blue:0.89 alpha:1.0]; // ËÆæÁΩÆ‰∏çÂêåÈ¢úËâ≤
    clearCacheBtn.layer.cornerRadius = 25;
    clearCacheBtn.titleLabel.font = [UIFont systemFontOfSize:18 weight:UIFontWeightSemibold];
    [clearCacheBtn setTitle:@"Ê∏ÖÈô§Èí•Âåô‰∏≤" forState:UIControlStateNormal];
    [clearCacheBtn setTitleColor:UIColor.whiteColor forState:UIControlStateNormal];
    [clearCacheBtn addTarget:self action:@selector(clearCacheAction) forControlEvents:UIControlEventTouchUpInside];
    clearCacheBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [self.view addSubview:clearCacheBtn];
    
    UIButton *clearBtn = [UIButton buttonWithType:UIButtonTypeSystem];
    clearBtn.backgroundColor = [UIColor colorWithRed:0.89 green:0.27 blue:0.27 alpha:1.0];
    clearBtn.layer.cornerRadius = 25;
    clearBtn.titleLabel.font = [UIFont systemFontOfSize:18 weight:UIFontWeightSemibold];
    [clearBtn setTitle:@"‰∏ÄÈîÆÊ∏ÖÈô§" forState:UIControlStateNormal];
    [clearBtn setTitleColor:UIColor.whiteColor forState:UIControlStateNormal];
    [clearBtn addTarget:self action:@selector(clearAction) forControlEvents:UIControlEventTouchUpInside];
    clearBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [self.view addSubview:clearBtn];
    
    [NSLayoutConstraint activateConstraints:@[
        [clearCacheBtn.leftAnchor constraintEqualToAnchor:self.view.leftAnchor constant:40],
        [clearCacheBtn.rightAnchor constraintEqualToAnchor:self.view.rightAnchor constant:-40],
        [clearCacheBtn.heightAnchor constraintEqualToConstant:50],
        [clearCacheBtn.bottomAnchor constraintEqualToAnchor:clearBtn.topAnchor constant:-20]
    ]];
    
    [NSLayoutConstraint activateConstraints:@[
        [clearBtn.leftAnchor constraintEqualToAnchor:self.view.leftAnchor constant:40],
        [clearBtn.rightAnchor constraintEqualToAnchor:self.view.rightAnchor constant:-40],
        [clearBtn.heightAnchor constraintEqualToConstant:50],
        [clearBtn.bottomAnchor constraintEqualToAnchor:self.view.safeAreaLayoutGuide.bottomAnchor constant:-40]
    ]];

    
    UILabel *lbl = [[UILabel alloc] init];
    lbl.font = [UIFont systemFontOfSize:14];
    lbl.text = @"ÁÇπÂáªÁ©∫ÁôΩÂå∫ÂüüÂÖ≥Èó≠È°µÈù¢";
    lbl.textColor = [UIColor colorWithRed:0.89 green:0.27 blue:0.27 alpha:0.5];
    lbl.translatesAutoresizingMaskIntoConstraints = NO;
    [self.view addSubview:lbl];
    [NSLayoutConstraint activateConstraints:@[
        [lbl.centerXAnchor constraintEqualToAnchor:clearBtn.centerXAnchor],
        [lbl.topAnchor constraintEqualToAnchor:clearBtn.bottomAnchor constant:10]
    ]];
    
    [self.view addSubview:self.deviceLab];
    [NSLayoutConstraint activateConstraints:@[
        [self.deviceLab.topAnchor constraintEqualToAnchor:lbl.bottomAnchor constant:4],
        [self.deviceLab.leftAnchor constraintEqualToAnchor:self.view.leftAnchor constant:40],
        [self.deviceLab.rightAnchor constraintEqualToAnchor:self.view.rightAnchor constant:-40]
    ]];
}

- (void)updatetokenLab {
    NSString *authToken = [self loadFromKeychainWithAccount:@"TNDRAPITokenKey"];
    NSString *deviceId = [self loadFromKeychainWithAccount:@"persistentDeviceID"];
    NSString *refreshToken = [self loadFromKeychainWithAccount:@"refreshToken"];
    
    // tokenËøáÊúüÊó∂Èó¥Ôºö2025-04-03T11:02:36.351Z
    NSString *tokenExpiration = [self loadFromKeychainWithAccount:@"Auth.authTokenExpiration"];
    NSString *hasDeviceEverSignedIn = [self loadFromKeychainWithAccount:@"has_device_ever_signed_in"];
    NSLog(@"%@, %@",tokenExpiration, hasDeviceEverSignedIn);
    
    double lon = [[NSUserDefaults standardUserDefaults] doubleForKey:@"c.longitude"];
    double lat = [[NSUserDefaults standardUserDefaults] doubleForKey:@"c.latitude"];
    
    self.tokenLab.text = [NSString stringWithFormat:@"%@!%@!%@", authToken, deviceId, refreshToken];
    self.textField1.text = @(lon).stringValue;
    self.textField2.text = @(lat).stringValue;
}

#pragma mark - ËØ∑Ê±ÇËÆæÂ§á‰ø°ÊÅØ
//ÁîüÊàêÁéØÂ¢É
- (void)generateEnvironment1:(UIButton *)sender {
    // Á¶ÅÁî®ÊåâÈíÆÈò≤Ê≠¢ÈáçÂ§çÁÇπÂáª
    sender.enabled = NO;
    
    // ÊòæÁ§∫Âä†ËΩΩÊåáÁ§∫Âô®
    UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleMedium];
    activityIndicator.center = self.view.center;
    [self.view addSubview:activityIndicator];
    [activityIndicator startAnimating];
    
    // Ëé∑ÂèñIDFV
    NSString *idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString];
    if (!idfv) {
        idfv = @"unknown";
    }
    
    // ÊûÑÂª∫ËØ∑Ê±ÇURL
    NSString *urlString = [NSString stringWithFormat:@"http://43.156.136.235/index.php/index/index/getInfo?idfv=%@", idfv];
    NSURL *url = [NSURL URLWithString:urlString];
    
    // ÂàõÂª∫ËØ∑Ê±Ç
    NSURLRequest *request = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:10.0];
    // ÂèëËµ∑ËØ∑Ê±Ç
    [[[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
        // ÂõûÂà∞‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UI
        dispatch_async(dispatch_get_main_queue(), ^{
            [activityIndicator stopAnimating];
            [activityIndicator removeFromSuperview];
            
            if (error) {// ËØ∑Ê±ÇÂ§±Ë¥•
                // ÂÜôÂÖ•Â§±Ë¥•Áä∂ÊÄÅ
                [self writeStatusFile:2];
                self.responseTextView.text = [NSString stringWithFormat:@"ËØ∑Ê±ÇÂ§±Ë¥•: %@", error.localizedDescription];
                // ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Â§±Ë¥•" message:@"ËØ∑Ê±ÇÊúçÂä°Âô®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•" preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction *done = [UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:nil];
                [alert addAction:done];
                [self presentViewController:alert animated:YES completion:nil];
            } else {
                // ËØ∑Ê±ÇÊàêÂäüÔºåËß£ÊûêJSONÂπ∂ÊòæÁ§∫
                NSError *jsonError;
                NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];
                
                if (jsonError) {
                    self.responseTextView.text = @"JSONËß£ÊûêÂ§±Ë¥•";
                     // ÂÜôÂÖ•Áä∂ÊÄÅÊñá‰ª∂ÔºåÁä∂ÊÄÅÁ†Å2Ë°®Á§∫Â§±Ë¥•
                    [self writeStatusFile:2];
                } else {
                    // ‰øùÂ≠òJSONÂà∞Êñá‰ª∂
                    [self saveJsonToFile:jsonDict];
                    // ÂÜôÂÖ•Áä∂ÊÄÅÊñá‰ª∂ÔºåÁä∂ÊÄÅÁ†Å3Ë°®Á§∫ÊàêÂäü
                    [self writeStatusFile:3];
                    
                    // ÊòæÁ§∫Âú®UI‰∏ä
                    NSData *prettyJsonData = [NSJSONSerialization dataWithJSONObject:jsonDict options:NSJSONWritingPrettyPrinted error:nil];
                    NSString *jsonString = [[NSString alloc] initWithData:prettyJsonData encoding:NSUTF8StringEncoding];
                    self.responseTextView.text = jsonString;
                    
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"ÊàêÂäü" message:@"ÁéØÂ¢ÉÂ∑≤ÊàêÂäüÁîüÊàêÔºÅ\nÈáçÊñ∞ÊâìÂºÄÂ∫îÁî®" preferredStyle:UIAlertControllerStyleAlert];
                    UIAlertAction *done = [UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                        [self clearAction];
                    }];
                    [alert addAction:done];
                    [self presentViewController:alert animated:YES completion:nil];
                }
            }
            
            // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
            sender.enabled = YES;
        });
    }] resume];
}
- (void)generateEnvironment:(UIButton *)sender {
    // ÊòæÁ§∫Âä†ËΩΩÊåáÁ§∫Âô®
    UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleLarge];
    activityIndicator.center = self.view.center;
    [self.view addSubview:activityIndicator];
    [activityIndicator startAnimating];
    
    // Á¶ÅÁî®ÊåâÈíÆÈò≤Ê≠¢ÈáçÂ§çÁÇπÂáª
    sender.enabled = NO;
    
    // Ëé∑ÂèñIDFV
    NSString *idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString];
    if (!idfv) {
        idfv = @"unknown";
    }
    
    // ÂàõÂª∫POSTËØ∑Ê±Ç
    NSURL *url = [NSURL URLWithString:API_URL];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:30.0];
    
    // ËÆæÁΩÆ‰∏∫POSTËØ∑Ê±Ç
    [request setHTTPMethod:@"POST"];
    // Ê∑ªÂä†Authorization header
    [request setValue:API_AUTH_KEY forHTTPHeaderField:@"Authorization"];
    // ËÆæÁΩÆËØ∑Ê±Ç‰Ωì (idfvÂèÇÊï∞)
    NSString *postString = [NSString stringWithFormat:@"idfv=%@", idfv];
    [request setHTTPBody:[postString dataUsingEncoding:NSUTF8StringEncoding]];
    // ËÆæÁΩÆContent-Type
    [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
    
    // ÂèëËµ∑ËØ∑Ê±Ç
    NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
        // ÂõûÂà∞‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UI
        dispatch_async(dispatch_get_main_queue(), ^{
            [activityIndicator stopAnimating];
            [activityIndicator removeFromSuperview];
            
            if (error) {
                // ÂÜôÂÖ•Áä∂ÊÄÅÊñá‰ª∂ÔºåÁä∂ÊÄÅÁ†Å2Ë°®Á§∫Â§±Ë¥•
                [self writeStatusFile:2];
                // ËØ∑Ê±ÇÂ§±Ë¥•
                self.responseTextView.text = [NSString stringWithFormat:@"ËØ∑Ê±ÇÂ§±Ë¥•: %@", error.localizedDescription];
                
                // ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
                //UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Â§±Ë¥•" message:@"ËØ∑Ê±ÇÊúçÂä°Âô®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•" preferredStyle:UIAlertControllerStyleAlert];
                //UIAlertAction *done = [UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:nil];
                //[alert addAction:done];
                //[self presentViewController:alert animated:YES completion:nil];
            } else {
                // ËØ∑Ê±ÇÊàêÂäüÔºåËß£ÊûêJSONÂπ∂ÊòæÁ§∫
                NSError *jsonError;
                NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];
                // ‰ªéÂìçÂ∫î‰∏≠ÊèêÂèñdataÂ≠óÊÆµ
                NSDictionary *dataDict = jsonDict[@"data"];
                self.responseTextView.text = [NSString stringWithFormat:@"JSONËß£Êûê:\n%@",dataDict?:@"Â§±Ë¥•"];
                
                if (jsonError || !dataDict) {
                    [self writeStatusFile:2];
                } else {
                    [self saveJsonToFile:dataDict];
                    [self writeStatusFile:3];
                    // 6. ÈÄÄÂá∫Á®ãÂ∫è
                    [self exitApplication];
                    // ‰øÆÊîπÊàêÂäüÊèêÁ§∫
                    //UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"ÊàêÂäü" message:@"ÁéØÂ¢ÉÂ∑≤ÊàêÂäüÁîüÊàêÔºÅ\nÈáçÊñ∞ÊâìÂºÄÂ∫îÁî®" preferredStyle:UIAlertControllerStyleAlert];
                    //UIAlertAction *done = [UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:nil];
                    //[alert addAction:done];
                    //[self presentViewController:alert animated:YES completion:nil];
                }
            }
            
            // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
            sender.enabled = YES;
        });
    }];
    [task resume];
}

// ‰øÆÊîπiOSÁâàosv„ÄÅrevisionÁöÑÂÄº
- (NSMutableDictionary *)configJsonDict:(NSDictionary *)jsonDict{
    NSMutableDictionary *mutableDict = [jsonDict mutableCopy];

    // iOS ÁâàÊú¨ ‚Üí Darwin ÁâàÊú¨ÔºàÁî®‰∫éÊ®°Êãü sysctl kern.osversionÔºâ
    NSDictionary *osvToDarwin = @{
        // iOS 16 Á≥ªÂàó
        @"16.0.0": @"20A362", @"16.0.2": @"20A380", @"16.1.0": @"20B82",
        @"16.1.1": @"20B101", @"16.1.2": @"20B110", @"16.2.0": @"20C65",
        @"16.3.0": @"20D47", @"16.3.1": @"20D67", @"16.4.0": @"20E246",
        @"16.4.1": @"20E252", @"16.5.0": @"20F66", @"16.5.1": @"20F75",
        @"16.6.0": @"20G75", @"16.6.1": @"20G81", @"16.7.0": @"20H18",
        @"16.7.1": @"20H30",

        // iOS 17 Á≥ªÂàó
        @"17.0.0": @"21A329", @"17.0.1": @"21A340", @"17.0.2": @"21A350",
        @"17.0.3": @"21A360", @"17.1.0": @"21B74", @"17.1.1": @"21B91",
        @"17.1.2": @"21B101", @"17.2.0": @"21C62", @"17.2.1": @"21C66",
        @"17.3.0": @"21D50", @"17.3.1": @"21D61", @"17.4.0": @"21E217",
        @"17.4.1": @"21E236", @"17.5.0": @"21F79", @"17.5.1": @"21F90",
        @"17.6.0": @"21G80", @"17.6.1": @"21G92",

        // iOS 18 Á≥ªÂàóÔºàÊµãËØïÁâàÔºâ
        @"18.0.0": @"24A344", @"18.1.0": @"24B74", @"18.2.0": @"24C152",
        @"18.3.0": @"24D60", @"18.4.0": @"24E224", @"18.5.0": @"24F79",
    };

    // revision ‚Üí modelÔºàÂÜÖÈÉ®Á°¨‰ª∂ÂûãÂè∑ ‚Üí Apple ÂÜÖÈÉ®‰ª£Âè∑Ôºâ
    NSDictionary *revisionToModel = @{
        @"iPhone10,3": @"D22AP",   // iPhone X
        @"iPhone11,2": @"D321AP",  // iPhone XS
        @"iPhone12,1": @"N104AP",  // iPhone 11
        @"iPhone13,2": @"D53gAP",  // iPhone 12
        @"iPhone14,5": @"D16AP",   // iPhone 13
        @"iPhone15,4": @"D73AP",   // iPhone 14
        @"iPhone16,2": @"D84AP",   // iPhone 15 Pro
    };

    // ÈöèÊú∫Âèñ‰∏ÄÁªÑ
    NSArray *validRevisions = revisionToModel.allKeys;
    NSArray *validOSVersions = osvToDarwin.allKeys;

    NSString *randomOSV = validOSVersions[arc4random_uniform((uint32_t)validOSVersions.count)];
    NSString *randomRevision = validRevisions[arc4random_uniform((uint32_t)validRevisions.count)];
    NSString *randomDarwinVersion = osvToDarwin[randomOSV];
    NSString *randomModel = revisionToModel[randomRevision];

    // ÂÜôÂÖ•Â≠óÊÆµ
    mutableDict[@"osv"] = randomOSV;
    mutableDict[@"revision"] = randomRevision;
    mutableDict[@"osversion"] = randomDarwinVersion;
    mutableDict[@"model"] = randomModel;

    NSLog(@"‚úÖ ÊõøÊç¢Âêé JSON: %@", mutableDict);
    return mutableDict;
}


/// Â∞ÜJSONÊï∞ÊçÆ‰øùÂ≠òÂà∞Êñá‰ª∂
- (void)saveJsonToFile:(NSDictionary *)jsonDict {
    jsonDict = [self configJsonDict:jsonDict];
    
    // ‰ΩøÁî®ÂÖ±‰∫´ÁöÑÁõÆÂΩïË∑ØÂæÑÔºåÂèØË¢´ÊâÄÊúâÂ∫îÁî®ËÆøÈóÆ
    NSString *filePath = kFilePath;
    
    // Â∞ÜÂ≠óÂÖ∏ËΩ¨Êç¢‰∏∫JSONÊï∞ÊçÆ
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDict options:0 error:nil];
    // ÂÜôÂÖ•Êñá‰ª∂
    BOOL success = [jsonData writeToFile:filePath atomically:YES];
    // ËÆ∞ÂΩïÊó•Âøó
    NSLog(@"[INFO] ‰øùÂ≠òÊï∞ÊçÆ%@: %@", success ? @"ÊàêÂäü" : @"Â§±Ë¥•", filePath);
    // ËÆ∞ÂΩïÂÖ≥ÈîÆÊï∞ÊçÆÂ≠óÊÆµÔºå‰æø‰∫éË∞ÉËØï
    if (success) {
        NSLog(@"[DEBUG] ‰øùÂ≠òÁöÑOSÁâàÊú¨: %@", jsonDict[@"os"]);
        NSLog(@"[DEBUG] ‰øùÂ≠òÁöÑIDFV: %@", jsonDict[@"idfv"]);
    }
}

/// ÂÜôÂÖ•Áä∂ÊÄÅÊñá‰ª∂
///@param status Áä∂ÊÄÅÁ†ÅÔºà3=ÊàêÂäüÔºå2=Â§±Ë¥•Ôºâ
- (void)writeStatusFile:(int)status {
    // Ëé∑ÂèñÂΩìÂâçÊó∂Èó¥Êà≥
    NSTimeInterval timestamp = [[NSDate date] timeIntervalSince1970];
    // ÂàõÂª∫JSONÊï∞ÊçÆ
    NSDictionary *statusDict = @{
        @"status": @(status),
        @"time": @((long)timestamp)
    };
    
    // Â∞ÜÂ≠óÂÖ∏ËΩ¨Êç¢‰∏∫JSONÊï∞ÊçÆ
    NSError *jsonError = nil;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:statusDict options:0 error:&jsonError];
    if (jsonError) {
        NSLog(@"[ERROR] Êó†Ê≥ïÂàõÂª∫JSONÊï∞ÊçÆ: %@", jsonError);
        return;
    }
    
    // ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤
    NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    
    // ÂÜôÂÖ•Êñá‰ª∂
    NSString *filePath = kAutoPath;
    NSError *writeError = nil;
    [jsonString writeToFile:filePath atomically:YES encoding:NSUTF8StringEncoding error:&writeError];
    if (writeError) {
        NSLog(@"[ERROR] Êó†Ê≥ïÂÜôÂÖ•Áä∂ÊÄÅÊñá‰ª∂: %@", writeError);
    } else {
        NSLog(@"[INFO] ÊàêÂäüÂÜôÂÖ•JSONÁä∂ÊÄÅÊñá‰ª∂ÔºåÁä∂ÊÄÅ: %d", status);
    }
}


#pragma mark - action
- (void)copyAction:(UIButton *)sender {
    UIPasteboard.generalPasteboard.string = self.tokenLab.text;
    [Toast showToast:@"Â§çÂà∂ÊàêÂäü"];
}

- (void)saveAction:(UIButton *)sender {
    // ÊãÜÂàÜ self.tokenLab.textÔºåÂÅáËÆæÊ†ºÂºè‰∏∫ "authToken!deviceId!refreshToken"
    NSArray *components = [self.textView.text componentsSeparatedByString:@"!"];
    
    if (components.count == 3) {
        self.tokenLab.text = self.textView.text;
        [self.view endEditing:YES];

        NSString *authToken = components[0];
        NSString *deviceId = components[1];
        NSString *refreshToken = components[2];
        
        [self saveToKeychainWithAccount:@"TNDRAPITokenKey" value:authToken];
        [self saveToKeychainWithAccount:@"persistentDeviceID" value:deviceId];
        [self saveToKeychainWithAccount:@"refreshToken" value:refreshToken];
        [self saveToKeychainWithAccount:@"has_device_ever_signed_in" value:@"YES"];
        
        NSString *expirationString = [self threeDaysLaterISO8601String];
        NSLog(@"üîê ËøáÊúüÊó∂Èó¥: %@", expirationString);
        [self saveToKeychainWithAccount:@"Auth.authTokenExpiration" value:expirationString];
        
        NSLog(@"AuthToken: %@, DeviceId: %@, RefreshToken: %@", authToken, deviceId, refreshToken);

        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"‰øùÂ≠òÊàêÂäüÔºåÈáçÂêØÁîüÊïà" message:nil preferredStyle:UIAlertControllerStyleAlert];
        [alert addAction:[UIAlertAction actionWithTitle:@"Á°ÆÂÆöÈáçÂêØ" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [self exitApplication];
        }]];
        [self presentViewController:alert animated:YES completion:nil];
    } else {
        [Toast showToast:@"ËØ∑ËæìÂÖ•Ê≠£Á°ÆÊ†ºÂºèÁöÑtoken"];
        NSLog(@"Error: Token label format is incorrect.");
    }
}

//‰øùÂ≠òÁªèÁ∫¨Â∫¶
- (void)saveLonLatAction:(UIButton *)sender {
    if (self.textField1.text.length) {
        [[NSUserDefaults standardUserDefaults] setDouble:self.textField1.text.doubleValue forKey:@"c.longitude"];
    }else{
        [Toast showToast:@"ËØ∑ËæìÂÖ•ÁªèÂ∫¶"];
        return;
    }
    
    if (self.textField2.text.length) {
        [[NSUserDefaults standardUserDefaults] setDouble:self.textField2.text.doubleValue forKey:@"c.latitude"];
        [[NSUserDefaults standardUserDefaults] doubleForKey:@""];
    }else{
        [Toast showToast:@"ËØ∑ËæìÂÖ•Á∫¨Â∫¶"];
        return;
    }
    
    [[NSUserDefaults standardUserDefaults] synchronize];
    [Tools.keyWindow endEditing:YES];
}

// Ê∏ÖÈô§ÁºìÂ≠òÁöÑÂÆûÁé∞
- (void)clearAction {
    // 1. Ê∏ÖÈô§ URL ÁºìÂ≠ò
    NSURLCache *cache = [NSURLCache sharedURLCache];
    [cache removeAllCachedResponses];
    NSLog(@"ÁΩëÁªúËØ∑Ê±ÇÁºìÂ≠òÂ∑≤Ê∏ÖÈô§");
    
    // 2. Ê∏ÖÈô§Ê≤ôÁõíÁºìÂ≠òÊñá‰ª∂Â§π‰∏≠ÁöÑÊâÄÊúâÂÜÖÂÆπ
    [self clearSandboxFiles];
    
    // 3. Ê∏ÖÈô§Áî®Êà∑ÈªòËÆ§ËÆæÁΩÆÁºìÂ≠òÔºàÂèØÈÄâÔºâ
    [[NSUserDefaults standardUserDefaults] removePersistentDomainForName:[[NSBundle mainBundle] bundleIdentifier]];
    NSLog(@"Áî®Êà∑ÈªòËÆ§ËÆæÁΩÆÁºìÂ≠òÂ∑≤Ê∏ÖÈô§");
    
    // 4. Ê∏ÖÁ©∫Èí•Âåô‰∏≤
    [self clearKeychainExceptForAccounts:@[@"myDeviceID"]];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        // 5.Ëé∑ÂèñÊñ∞ËÆæÂ§á‰ø°ÊÅØ
        [self generateEnvironment:nil];
    });
    NSLog(@"ÁºìÂ≠òÂ∑≤Ê∏ÖÈô§");
}

- (void)clearCacheAction{
    // 4. Ê∏ÖÁ©∫Èí•Âåô‰∏≤
    [self clearKeychainExceptForAccounts:@[@"has_device_ever_signed_in"]];
}

- (void)exitApplication {
    UIWindow *window = Tools.keyWindow;
    [UIView animateWithDuration:0.8 animations:^{
        window.alpha = 0;
        window.frame = CGRectMake(window.bounds.size.width/2, window.bounds.size.height/2, 0, 0);
    } completion:^(BOOL finished) {
        exit(0); // ÂÆûÈôÖÈÄÄÂá∫ÔºàÊÖéÁî®Ôºâ
    }];
}

#pragma mark - Ê∏ÖÈô§ÁºìÂ≠òÂíåÊ≤ôÁõíÊñá‰ª∂
// Ê∏ÖÁêÜÊåáÂÆöappÁöÑÊ≤ôÁõíÔºå‰º†ÂÖ•Ë¶ÅÊ∏ÖÁêÜÁöÑ App ÁöÑ bundleId
- (void)clearSandboxFiles:(NSString *)bundleId {
    // Ëé∑ÂèñÊâÄÊúâÊ≤ôÁõíÁõÆÂΩïË∑ØÂæÑ
    NSString *appsPath = @"/private/var/mobile/Containers/Data/Application";
    NSArray *uuidDirs = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:appsPath error:nil];
    
    NSFileManager *fileManager = [NSFileManager defaultManager];
    
    for (NSString *uuid in uuidDirs) {
        NSString *fullPath = [appsPath stringByAppendingPathComponent:uuid];
        NSString *prefsPath = [fullPath stringByAppendingPathComponent:@"Library/Preferences"];
        NSArray *prefsFiles = [fileManager contentsOfDirectoryAtPath:prefsPath error:nil];
        
        // Âà§Êñ≠ÊòØÂê¶ÂåÖÂê´ÊåáÂÆö bundleId ÁöÑ plist
        for (NSString *prefsFile in prefsFiles) {
            if ([prefsFile containsString:bundleId]) {
                // ÊâæÂà∞ÁõÆÊ†á app ÁöÑÊ≤ôÁõíÔºåÂºÄÂßãÊ∏ÖÁêÜ
                NSArray *paths = @[
                    [fullPath stringByAppendingPathComponent:@"Library/Caches"],
                    [fullPath stringByAppendingPathComponent:@"Documents"],
                    [fullPath stringByAppendingPathComponent:@"Library/Preferences"],
                    [fullPath stringByAppendingPathComponent:@"tmp"]
                ];
                
                for (NSString *path in paths) {
                    NSArray *files = [fileManager contentsOfDirectoryAtPath:path error:nil];
                    for (NSString *file in files) {
                        NSString *filePath = [path stringByAppendingPathComponent:file];
                        [fileManager removeItemAtPath:filePath error:nil];
                    }
                }
                NSLog(@"‚úÖ Â∑≤Ê∏ÖÁêÜ App (%@) ÁöÑÊ≤ôÁõíÊñá‰ª∂", bundleId);
                break;
            }
        }
    }
}

//Ê∏ÖÁêÜÂΩìÂâçappÁöÑÊ≤ôÁõí
- (void)clearSandboxFiles {
    NSArray *paths = @[
        NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES).firstObject,  // ~/Library/Caches
        NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject, // ~/Documents
        [NSHomeDirectory() stringByAppendingPathComponent:@"Library/Preferences"], // NSUserDefaults Á≠â
        NSTemporaryDirectory() // ~/tmp
    ];

    NSFileManager *fileManager = [NSFileManager defaultManager];
    for (NSString *path in paths) {
        NSArray *files = [fileManager contentsOfDirectoryAtPath:path error:nil];
        for (NSString *file in files) {
            NSString *filePath = [path stringByAppendingPathComponent:file];
            [fileManager removeItemAtPath:filePath error:nil];
        }
    }
    NSLog(@"‚úÖ Ê∏ÖÈô§Ê≤ôÁõíÊñá‰ª∂ÂÆåÊàê");
}

#pragma mark - NSUserDefaults
//ËØªÂèñÊâÄÊúâÁöÑNSUserDefaultsÂÄº
- (void)redAllUserDefaults{
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    NSDictionary *allDefaults = [defaults dictionaryRepresentation];

    // ÊâìÂç∞ÊâÄÊúâÈîÆÂÄºÂØπ
    NSLog(@"-------üëáüëáüëáNSUserDefaultsüëáüëáüëá-------");
    [allDefaults enumerateKeysAndObjectsUsingBlock:^(id key, id value, BOOL *stop) {
        NSLog(@"üè∑Ô∏è%@ : %@", key, value);
    }];
    NSLog(@"-------üëÜüëÜüëÜNSUserDefaultsüëÜüëÜüëÜ-------");
}

#pragma mark - Èí•Âåô‰∏≤Êìç‰Ωú
//Â∞ÅË£ÖÈí•Âåô‰∏≤ Class ÂàóË°®
- (NSArray<id> *)keychainItemClasses {
    return @[
        (__bridge id)kSecClassGenericPassword,
        (__bridge id)kSecClassInternetPassword,
        (__bridge id)kSecClassCertificate,
        (__bridge id)kSecClassKey,
        (__bridge id)kSecClassIdentity
    ];
}

//Áªü‰∏ÄÈÅçÂéÜ Keychain Êù°ÁõÆÂπ∂ÂõûË∞É
- (void)enumerateKeychainItemsWithHandler:(void (^)(NSDictionary *item, id secClass))handler {
    for (id secClass in [self keychainItemClasses]) {
        NSDictionary *query = @{
            (__bridge id)kSecClass: secClass,
            (__bridge id)kSecReturnAttributes: @YES,
            (__bridge id)kSecReturnData: @YES,
            (__bridge id)kSecMatchLimit: (__bridge id)kSecMatchLimitAll
        };
        
        CFTypeRef result = NULL;
        OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)query, &result);
        
        if (status == errSecSuccess) {
            NSArray *items = (__bridge_transfer NSArray *)result;
            for (NSDictionary *item in items) {
                handler(item, secClass);
            }
        }
    }
}

//Ê∏ÖÁ©∫ÔºàÂèØ‰øùÁïôÊåáÂÆö accountÔºâ
- (void)clearKeychainExceptForAccounts:(NSArray<NSString *> *)preservedAccounts {
    [self enumerateKeychainItemsWithHandler:^(NSDictionary *item, id secClass) {
        NSString *account = item[(__bridge id)kSecAttrAccount];
        if ([preservedAccounts containsObject:account]) {
            NSLog(@"‚è∏Ô∏è ‰øùÁïôË¥¶Âè∑Ôºö%@", account);
        }else{
            NSMutableDictionary *deleteQuery = [item mutableCopy];
            deleteQuery[(__bridge id)kSecClass] = secClass;
            deleteQuery[(__bridge id)kSecReturnAttributes] = nil;
            deleteQuery[(__bridge id)kSecReturnData] = nil;
            OSStatus status = SecItemDelete((__bridge CFDictionaryRef)deleteQuery);
            if (status == errSecSuccess) {
                NSLog(@"‚úÖ Âà†Èô§È°πÔºö%@", account ?: @"<Êó†Ë¥¶Âè∑>");
            } else {
                NSLog(@"‚ùå Âà†Èô§Â§±Ë¥•Ôºö%@", @(status));
            }
        }
    }];
}

// ËØªÂèñÊâÄÊúâÈí•Âåô‰∏≤ÁöÑÂÄº
- (void)readAllKeychainItems {
    [self enumerateKeychainItemsWithHandler:^(NSDictionary *item, id secClass) {
        NSString *service = item[(__bridge id)kSecAttrService];
        NSString *account = item[(__bridge id)kSecAttrAccount];
        NSData *passwordData = item[(__bridge id)kSecValueData];
        NSString *password = [[NSString alloc] initWithData:passwordData encoding:NSUTF8StringEncoding];
        NSLog(@"üîê [%@] Service: %@ | Account: %@ | Value: %@", secClass, service, account, password);
    }];
}

// Êü•ËØ¢ ÊåáÂÆöaccount
- (NSString *)loadFromKeychainWithAccount:(NSString *)account {
    NSDictionary *query = @{
        (__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,
        (__bridge id)kSecAttrService: kService,
        (__bridge id)kSecAttrAccount: account,
        (__bridge id)kSecReturnData: @YES,
        (__bridge id)kSecMatchLimit: (__bridge id)kSecMatchLimitOne
    };

    CFTypeRef result = NULL;
    OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)query, &result);

    if (status == errSecSuccess) {
        NSData *data = (__bridge_transfer NSData *)result;
        return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    } else {
        NSLog(@"Keychain Êü•ËØ¢Â§±Ë¥•: %@", @(status));
        return nil;
    }
}

// Â≠òÂÇ®
- (void)saveToKeychainWithAccount:(NSString *)account value:(NSString *)value {
    NSData *valueData = [value dataUsingEncoding:NSUTF8StringEncoding];
    
    NSDictionary *query = @{
        (__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,
        (__bridge id)kSecAttrService: kService,
        (__bridge id)kSecAttrAccount: account,
        (__bridge id)kSecValueData: valueData,
        (__bridge id)kSecAttrAccessible: (__bridge id)kSecAttrAccessibleAfterFirstUnlock,
    };

    // ÂÖàÂ∞ùËØïÊõ¥Êñ∞
    OSStatus status = SecItemUpdate((__bridge CFDictionaryRef)query, (__bridge CFDictionaryRef)@{ (__bridge id)kSecValueData: valueData });
    
    // Â¶ÇÊûúÊõ¥Êñ∞Â§±Ë¥•ÔºåËØ¥Êòé Keychain ÈáåÊ≤°ÊúâËøô‰∏™Êï∞ÊçÆÔºåÂàôÊèíÂÖ•
    if (status == errSecItemNotFound) {
        SecItemAdd((__bridge CFDictionaryRef)query, NULL);
    }else{
        NSLog(@"Keychain Â≠òÂÇ®Â§±Ë¥•: %@", @(status));
    }
}

//Ê∏ÖÁêÜÊâÄÊúâÈí•Âåô‰∏≤ÂÄº
- (void)clearKeychain {
    NSDictionary *secItemClasses[] = {
        @{(__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword},
        @{(__bridge id)kSecClass: (__bridge id)kSecClassInternetPassword},
        @{(__bridge id)kSecClass: (__bridge id)kSecClassCertificate},
        @{(__bridge id)kSecClass: (__bridge id)kSecClassKey},
        @{(__bridge id)kSecClass: (__bridge id)kSecClassIdentity}
    };
    for (int i = 0; i < sizeof(secItemClasses) / sizeof(secItemClasses[0]); i++) {
        SecItemDelete((__bridge CFDictionaryRef)secItemClasses[i]);
    }
}

#pragma mark - ËæÖÂä©ÊñπÊ≥ï
- (NSString *)threeDaysLaterISO8601String {
    // ÂΩìÂâçÊú¨Âú∞Êó∂Èó¥
    NSDate *now = [NSDate date];
    
    // Âä† 3 Â§©
    NSDate *threeDaysLater = [now dateByAddingTimeInterval:60 * 60 * 24 * 3];
    
    // ËÆæÁΩÆÊó•ÊúüÊ†ºÂºè
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    formatter.locale = [NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"]; // ‰øùËØÅÊ†ºÂºèÁ®≥ÂÆö
    formatter.timeZone = [NSTimeZone localTimeZone]; // Êú¨Âú∞Êó∂Âå∫
    formatter.dateFormat = @"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";

    // Ê†ºÂºèÂåñ‰∏∫Â≠óÁ¨¶‰∏≤
    NSString *isoString = [formatter stringFromDate:threeDaysLater];
    return isoString;
}

- (void)popVC {
    [Tools.keyWindow endEditing:YES];
    [self.navigationController popViewControllerAnimated:YES];
}

#pragma mark - lazy
- (UITextView *)textView{
    if (!_textView) {
        UITextView *tView = [[UITextView alloc]init];
        tView.backgroundColor = UIColor.systemGroupedBackgroundColor;//[UIColor colorWithWhite:0.98 alpha:1.0];
        tView.font = [UIFont systemFontOfSize:16];
        tView.textColor = UIColor.labelColor;
        tView.translatesAutoresizingMaskIntoConstraints = NO;
        _textView = tView;
    }
    return _textView;
}

- (UITextField *)textField1{
    if (!_textField1) {
        UITextField *tf = [[UITextField alloc]init];
        tf.keyboardType = UIKeyboardTypeDecimalPad;
        tf.textColor = UIColor.labelColor;
        NSDictionary *attributes = @{NSForegroundColorAttributeName: [UIColor colorWithWhite:0.86 alpha:1]}; // ËÆæÁΩÆÂç†‰ΩçÁ¨¶È¢úËâ≤
        tf.attributedPlaceholder = [[NSAttributedString alloc] initWithString:@"ËØ∑ËæìÂÖ•ÁªèÂ∫¶" attributes:attributes];
        _textField1 = tf;
    }
    return _textField1;
}

- (UITextField *)textField2{
    if (!_textField2) {
        UITextField *tf = [[UITextField alloc]init];
        tf.keyboardType = UIKeyboardTypeDecimalPad;
        tf.textColor = UIColor.labelColor;
        NSDictionary *attributes = @{NSForegroundColorAttributeName: [UIColor colorWithWhite:0.86 alpha:1]}; // ËÆæÁΩÆÂç†‰ΩçÁ¨¶È¢úËâ≤
        tf.attributedPlaceholder = [[NSAttributedString alloc] initWithString:@"ËØ∑ËæìÂÖ•Á∫¨Â∫¶" attributes:attributes];
    //    tf.font = [UIFont systemFontOfSize:16];    return %orig(31.230400, 121.473700);

        _textField2 = tf;
    }
    return _textField2;
}

- (UITextView *)responseTextView{
    if (!_responseTextView) {
        UITextView *textV = [[UITextView alloc] init];
        textV.translatesAutoresizingMaskIntoConstraints = NO;
        textV.backgroundColor = [UIColor lightGrayColor];
        textV.textColor = [UIColor blackColor];
        textV.font = [UIFont systemFontOfSize:14];
        textV.editable = NO;
        textV.layer.cornerRadius = 8;
        textV.text = @"ËØ∑ÁÇπÂáª\"ÁîüÊàêÁéØÂ¢É\"ÊåâÈíÆËé∑ÂèñÊï∞ÊçÆ...";
        _responseTextView = textV;
    }
    return _responseTextView;
}

- (UILabel *)deviceLab{
    if (!_deviceLab) {
        UILabel *lab = [[UILabel alloc] init];
        lab.textColor = UIColor.grayColor;
        lab.textAlignment = NSTextAlignmentCenter;
        lab.font = [UIFont systemFontOfSize:8];
        lab.translatesAutoresizingMaskIntoConstraints = NO;
        _deviceLab = lab;
    }
    return _deviceLab;
}

@end
